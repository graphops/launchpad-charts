{{- $componentName := "grpc"}}
{{- $componentValues := deepCopy (index $.Values $componentName) -}}
{{- $commonValues := deepCopy $.Values.common -}}
{{- $values := fromYaml (include "firehose-evm.genericMerge" (list $commonValues $componentValues)) -}}
{{- $templateContext := dict "Root" $ "Pod" $values "componentName" $componentName }}
{{- $configToml := include "firehose-evm.generateConfigmap" $templateContext }}
{{- $configHash := sha256sum $configToml }}
{{- $args := include "generateArgs" (dict "object" $values.fireeth.args "order" $values.fireeth.argsOrder ) -}}

{{- if $values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "firehose-evm.fullname" . }}-{{ $componentName }}
  {{- with $values }}
  labels:
  {{- $labels := include "firehose-evm.allLabels" (dict "Root" $ "Pod" $values "componentName" $componentName "annotations") | fromYaml }}
  {{- range $key, $value := $labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- end }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    {{- with $values }}
    matchLabels:
    {{- $labels := include "firehose-evm.allLabels" (dict "Root" $ "Pod" $values "componentName" $componentName "annotations") | fromYaml }}
    {{- range $key, $value := $labels }}
      {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
  serviceName: {{ include "firehose-evm.fullname" . }}-{{ $componentName }}-headless
  replicas: {{ $values.replicas }}
  template:
    metadata:
      {{- with $values }}
      annotations:
      {{- $annotations := include "firehose-evm.allAnnotations" (dict "Root" $ "Pod" $values "componentName" $componentName "annotations" .annotations) | fromYaml }}
      {{- range $key, $value := $annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if $values.configMap.enabled }}
        checksum/config.toml: {{ $configHash }} # this will automate restarts of Deployment Pods when config changes
      {{- else if not .annotations }}
        # Add an empty line to ensure annotations block is created if it does not exist
        {}
      {{- end }}
      {{- end }}
      {{- with $values }}
      labels:
      {{- $labels := include "firehose-evm.allLabels" (dict "Root" $ "Pod" . "componentName" $componentName "annotations") | fromYaml }}
      {{- range $key, $value := $labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "firehose-evm.serviceAccountName" (dict "Root" $ "Pod" $values "componentName" $componentName) }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      {{- $initContainers := include "helpers.initContainers" (dict "rootCtx" $ "podCtx" $values) | fromYaml }}
      {{- if $initContainers }}
      initContainers:
        {{- range $name, $container := $initContainers }}
        - name: {{ $name }}
          {{- toYaml $container | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- range $key, $value := . }}
        - key: {{ $key }}
          {{- toYaml $value | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- with $values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range $key, $value := . }}
        - {{- toYaml $value | nindent 10 }}
          labelSelector:
            matchLabels:
              {{- include "firehose-evm.selectorLabels" $ | nindent 14 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ $componentName }}
          {{- with $values.image }}
          image: {{ include "firehose-evm.fullImage" . | quote }}
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          {{- with $values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          args:
            {{ $args | nindent 12 }}
            - "start"
            - "-c"
            - "/config/config.yaml"
            {{- with $values.extraArgs }}
              {{- toYaml (. | default list) | nindent 12 }}
            {{- end }}
          ports:
          {{- range $name, $port := $values.service.ports }}
          - name: {{ $name }}
            containerPort: {{ $port.port }}
            protocol: {{ $port.protocol | default "TCP" }}
          {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- with $values.env }}
          {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          {{- with $values.envFromSecret }}
          {{- range $key, $value := . }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName | quote }}
                  key: {{ $value.key | quote }}
                  optional: false
          {{- end }}
          {{- end }}
          {{- with $values.envFromConfigmap }}
          {{- range $key, $value := . }}
            - name: {{ $key | quote }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.configMapName | quote }}
                  key: {{ $value.key | quote }}
          {{- end }}
          {{- end }}
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $values.lifecycle }}
          lifecycle:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: grpc
              mountPath: "/var/lib/fireeth"
            - name: config
              mountPath: "/config"
              readOnly: true
      volumes:
        - name: grpc
          emptyDir: {}
        - name: config
          configMap:
            name: {{ include "firehose-evm.fullname" . }}-{{ $componentName }}-config
        {{- with $values.extraVolumes }}
        {{- tpl (toYaml .) (deepCopy $templateContext) | nindent 8 }}
        {{- end }}
{{- end }}
