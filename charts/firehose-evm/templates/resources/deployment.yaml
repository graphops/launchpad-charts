{{- define "defaults.Deployment" }}
{{- $configHash := "0xdeadbeef"}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "metadata.fullname" $ }}-{{ .componentName }}
  {{- with .Pod }}
  labels:
  {{- $labels := include "metadata.allLabels" $ | fromYaml }}
  {{- range $key, $value := $labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- end }}
  namespace: {{ .Root.Release.Namespace }}
spec:
  selector:
    {{- with .Pod }}
    matchLabels:
    {{- $labels := include "metadata.allLabels" $ | fromYaml }}
    {{- range $key, $value := $labels }}
      {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
  replicas: {{ .Pod.replicas }}
  template:
    metadata:
      {{- with .Pod }}
      annotations:
      {{- $annotations := include "metadata.allAnnotations" ( set ( deepCopy $ ) "annotations" .annotations ) | fromYaml }}
      {{- range $key, $value := $annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .configMap.enabled }}
        checksum/config.toml: {{ $configHash }} # this will automate restarts of Deployment Pods when config changes
      {{- else if not .annotations }}
        # Add an empty line to ensure annotations block is created if it does not exist
        {}
      {{- end }}
      {{- end }}
      {{- with .Pod }}
      labels:
      {{- $labels := include "metadata.allLabels" ( set ( deepCopy $ ) "labels" .labels ) | fromYaml }}
      {{- range $key, $value := $labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
    spec:
      {{- with .Pod.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "metadata.serviceAccountName" $ }}
      {{- with .Pod.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Pod.terminationGracePeriodSeconds | default "60" }}
      {{- with .Pod.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- $initContainers := include "resources.initContainers" $ | fromYaml }}
      {{- if $initContainers }}
      initContainers:
      {{- range $name, $container := $initContainers }}
      - name: {{ $name }}
        {{- $container | toYaml | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- with .Pod.tolerations }}
      tolerations:
        {{- range $key, $value := . }}
        - key: {{ $key }}
          {{- toYaml $value | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- with .Pod.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Pod.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range $key, $value := . }}
        - {{- toYaml $value | nindent 10 }}
          labelSelector:
            matchLabels:
              {{- include "metadata.selectorLabels" $ | nindent 14 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .componentName }}
          {{- with .Pod.image }}
          image: {{ include "utils.getImage" $ | quote }}
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          {{- with .Pod.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- $args := include "utils.generateArgsList" ( dict "map" .Pod.fireeth.args "orderList" .Pod.fireeth.argsOrder "templateCtx" $ ) | fromYamlArray }}
          args:
          {{- range $arg := $args }}
            - {{ $arg }}
          {{- end }}
          ports:
          {{- range $name, $port := .Pod.service.ports }}
          - name: {{ $name }}
            containerPort: {{ $port.port }}
            protocol: {{ $port.protocol | default "TCP" }}
          {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- with .Pod.env }}
          {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          {{- with .Pod.envFromSecret }}
          {{- range $key, $value := . }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName | quote }}
                  key: {{ $value.key | quote }}
                  optional: false
          {{- end }}
          {{- end }}
          {{- with .Pod.envFromConfigmap }}
          {{- range $key, $value := . }}
            - name: {{ $key | quote }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.configMapName | quote }}
                  key: {{ $value.key | quote }}
          {{- end }}
          {{- end }}
          {{- with .Pod.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Pod.lifecycle }}
          lifecycle:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: grpc
              mountPath: "/var/lib/fireeth"
            - name: config
              mountPath: "/config"
              readOnly: true
      volumes:
        - name: grpc
          emptyDir: {}
        - name: config
          configMap:
            name: {{ include "metadata.fullname" $ }}-{{ .componentName }}-config
        {{- with .Pod.extraVolumes }}
        {{- tpl (toYaml .) (deepCopy $) | nindent 8 }}
        {{- end }}
{{- end }}

{{- range $key, $componentValues := $.Values.firehosePods -}}
{{- $componentName := $key }}

{{- $templateCtx := include "resources.mergeValues" (dict "Root" $ "componentName" $key ) | fromYaml }}

{{- $values := deepCopy $templateCtx.Pod }}

{{- $defaultDeployment := include "defaults.Deployment" $templateCtx | fromYaml }}

{{- $templatedDeployment := get (list $defaultDeployment $templateCtx | include "utils.templateCollection" | fromYaml) "result" }}

---
DEBUG:
{{ $defaultDeployment | toYaml }}
{{- end }}
