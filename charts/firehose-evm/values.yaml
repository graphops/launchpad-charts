# Default values for firehose-evm.
# This is a YAML-formatted file.

global:
  nameOverride: ""
  fullnameOverride: ""
  # -- Global labels added to all resources
  labels: {}
  # -- Global annotations added to all resources
  annotations: {}

firehoseComponentDefaults:
  kind: Deployment
  # -- Image configuration for firehose-evm
  image:
    # -- Docker image repository
    repository: "ghcr.io/streamingfast/firehose-ethereum"
    # -- Image pull policy
    pullPolicy: "IfNotPresent"
    # -- Overrides the image reference using a tag
    # digest takes precedence over tag if both are set
    tag: "v2.6.7-geth-v1.13.15-fh2.4"
    # -- Overrides the image reference using a specific digest
    digest: ""

  # -- Pull secrets required to fetch images
  imagePullSecrets: []

  # -- Firehose-specific configuration
  fireeth:
    services: []
    metrics:
      enabled: true
      addr: 0.0.0.0
      port: 9102
    pprof:
      enabled: true
      addr: 127.0.0.1
      port: 6060
    config:
      data-dir: "/var/lib/fireeth"
      metrics-listen-addr: '{{ with .Pod.fireeth.metrics }}{{ .enabled | ternary (printf "%s:%d" .addr ( .port | int ) ) nil }}{{ end }}'
      pprof-listen-addr: '{{ with .Pod.fireeth.pprof }}{{ .enabled | ternary (printf "%s:%d" .addr ( .port | int ) ) nil }}{{ end }}'
      log-to-file: false
      common-index-block-sizes: 10000
      firehose-rate-limit-bucket-size: 20
      firehose-rate-limit-bucket-fill-rate: "1s"
      common-one-block-store-url: null
      common-forked-blocks-store-url: null
      common-merged-blocks-store-url: null
      common-live-blocks-addr: "relayer:10014"
    args:
      start: "__none"
      "-c": "/config/config.yaml"
    argsOrder:
      - start
      - "-c"

  configMap:
    enabled: true
    useEnvSubst: false
    template: |
      {{- $nodeArgs := false }}
      start:
        args:
          {{- range .Pod.fireeth.services }}
          - {{ . }}
          {{- if contains "node" . }}
          {{- $nodeArgs := true }}
          {{- end }}
          {{- end }}
        flags:
          {{- .Pod.fireeth.config | toYaml | nindent 4 }}
          {{- if $nodeArgs }}
          {{- $readerNodeArgs := include "utils.generateArgsList" (dict "map" ( .Pod.node.args | default dict ) ) | fromYamlArray }}
          reader-node-arguments: |
          {{- range $readerNodeArgs }}
            - {{ . | quote }}
          {{- end }}
          {{- end }}

  # -- Service configuration
  service:
    enabled: true
    spec:
      # -- Service type
      type: "ClusterIP"
      # -- Service ports configuration
      ports:
        fh-metrics:
          port: '{{ with .Pod.fireeth.metrics }}{{ .enabled | ternary (printf "%d" ( .port | int ) ) nil }}{{ end }}'
          protocol: "TCP"
    # -- Additional service labels
    labels: {}
    # -- Additional service annotations
    annotations: {}

  # -- Also create headless services, mandatory for StatefulSets and true by default
  serviceHeadless: '{{ eq .Pod.kind "StatefulSet" | ternary true true }}'

  # -- Init containers configuration
  initContainers: {}

  # -- Environment variables
  env: {}

  # -- Environment variables from references
  envFrom:
    SecretKeyRef:
      FIREETH_COMMON_ONE_BLOCK_STORE_URL:
        # -- Name of the secret that contains your S3 bucket url for storing one blocks
        name: ""
        # -- Name of the data key in the secret that contains your S3 bucket url for storing one blocks
        key: ""
      FIREETH_COMMON_MERGED_BLOCKS_STORE_URL:
        # -- Name of the secret that contains your S3 bucket url for storing merged blocks
        name: ""
        # -- Name of the data key in the secret that contains your S3 bucket url for storing merged blocks
        key: ""
      FIREETH_COMMON_FORKED_BLOCKS_STORE_URL:
        # -- Name of the secret that contains your S3 bucket url for storing forked blocks
        name: ""
        # -- Name of the data key in the secret that contains your S3 bucket url for storing forked blocks
        key: ""
      FIREETH_COMMON_INDEX_STORE_URL:
        # -- Name of the secret that contains your S3 bucket url of your index store
        name: ""
        # -- Name of the data key in the secret that contains your S3 bucket url of your index store
        key: ""

  # -- ServiceMonitor configuration for Prometheus Operator
  serviceMonitor:
    # -- Enable monitoring by creating `ServiceMonitor` CRDs ([prometheus-operator](https://github.com/prometheus-operator/prometheus-operator))
    enabled: true
    metadata:
      labels: {}
      annotations: {}
    spec:
      # Endpoint overrides, keyed by port name
      endpoints:
        metrics-fh:
          # Override or add any endpoint-specific fields
          interval: "30s"
          scrapeTimeout: "10s"
          path: /metrics
          honorLabels: true
          # ... any other endpoint-specific fields
      # Any other top-level ServiceMonitor spec fields

  # -- Service account configuration
  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
    # -- Annotations to add to the service account
    annotations: {}
    # -- Labels to add to the service account
    labels: {}
    rbac:
      create: true
      rules: []
      clusterWide: false

  # Increasing the grace termination period prevents Kubernetes
  # from killing the node process prematurely. Premature shutdown
  # can lead to data integrity issues
  # -- Amount of time to wait before force-killing the process
  terminationGracePeriodSeconds: 10

  # -- Component level annotations (templated)
  annotations: {}

  # -- Component level labels (templated)
  labels:
    app.kubernetes.io/component: '{{ .componentName }}'
    app.kubernetes.io/part-of: '{{ .Root.Release.Name }}'
    version.firehose.graphops.xyz/fireeth: "2.6.7"
    version.firehose.graphops.xyz/node: "1.13.15"
    version.firehose.graphops.xyz/protocol: "2.4"

  # -- Pod-wide security context
  podSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL
  # -- Container level security context overrides
  securityContext: {}

  # -- Resource requests and limits
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi

  # -- Node selector configuration
  nodeSelector: {}

  # -- Tolerations configuration
  tolerations: []

  # -- Affinity configuration
  affinity: {}

  # -- Topology spread constraints
  topologySpreadConstraints: []

  # -- Lifecycle hooks
  lifecycle: {}
    # postStart:
    #   exec:
    #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
    # preStop:
    #   exec:
    #     command: ["/bin/sh","-c","nginx -s quit; while killall -0 nginx; do sleep 1; done"]

  # -- Pod Disruption Budget configuration
  podDisruptionBudget:
    enabled: true
    # minAvailable: 1
    # or
    # maxUnavailable: 25%

  # -- Horizontal Pod Autoscaler configuration
  horizontalPodAutoscaler:
    enabled: false
    # example:
    # minReplicas: 2
    # maxReplicas: 10
    # metrics:
    #   - type: "Resource"
    #     resource:
    #       name: "cpu"
    #       targetAverageUtilization: 80

  ports:
    metrics-fh:
      containerPort: '{{ with .Pod.fireeth.metrics }}{{ .enabled | ternary (printf "%d" ( .port | int ) ) nil }}{{ end }}'
      protocol: TCP


  # -- Update Strategy, (RollingUpdate | Recreate) for Deployments, (RollingUpdate | OnDelete) for StatefulSets
  updateStrategy:
    type: RollingUpdate

  # -- (StatefulSet only), scaling behavior: (OrderedReady | Parallel)
  podManagementPolicy: OrderedReady

  # -- (StatefulSet only), headless service name

  # -- Extra containers to add to the pod (templated)
  extraContainers: {}
    # example:
    #   sidecar1:
    #     image: nginx:latest
    #     ports:
    #       - containerPort: 80

  volumes:
    data-dir:
      enabled: true
      emptyDir: {}
    config:
      enabled: '{{ .Pod.configMap.enabled }}'
      configMap:
        name: '{{ include "metadata.fullname" $ }}-{{ .componentName }}-config'
        defaultMode: 420
    config-processed:
      enabled: '{{ .Pod.configMap.useEnvSubst }}'
      emptyDir: {}

  volumeMounts:
    data-dir:
      enabled: true
      readOnly: false
      mountPath: '{{ index .Pod.fireeth.config "data-dir" }}'
    config:
      enabled: '{{ .Pod.configMap.enabled }}'
      mountPath: '{{ .Pod.configMap.useEnvSubst | ternary "/config-input" "/config" }}'
      readOnly: true
    config-processed:
      enabled: '{{ .Pod.configMap.useEnvSubst }}'
      mountPath: "/config"
      readOnly: false


firehoseServiceDefaults:
  firehose:
    fireeth:
      config:
        firehose-grpc-listen-addr: "0.0.0.0:10015"

    service:
      enabled: true
      spec:
        ports:
          firehose-grpc:
            port: '{{ with .Pod.fireeth.config }}{{ if (index . "firehose-grpc-listen-addr") }}{{ splitList ":" (index . "firehose-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
            protocol: TCP

    ports:
      firehose-grpc:
        containerPort: '{{ with .Pod.fireeth.config }}{{ if (index . "firehose-grpc-listen-addr") }}{{ splitList ":" (index . "firehose-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
        protocol: TCP

  merger:
    fireeth:
      config:
        merger-grpc-listen-addr: ":10012"

    service:
      enabled: true
      spec:
        ports:
          merger-grpc:
            port: '{{ with .Pod.fireeth.config }}{{ if (index . "merger-grpc-listen-addr") }}{{ splitList ":" (index . "merger-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
            protocol: TCP

    ports:
      merger-grpc:
        containerPort: '{{ with .Pod.fireeth.config }}{{ if (index . "merger-grpc-listen-addr") }}{{ splitList ":" (index . "merger-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
        protocol: TCP

  relayer:
    fireeth:
      config:
        relayer-source: "reader:10010"
        relayer-grpc-listen-addr: "0.0.0.0:10014"
        relayer-max-source-latency: 1h

    service:
      enabled: true
      spec:
        ports:
          relayer-grpc:
            port: '{{ with .Pod.fireeth.config }}{{ if (index . "relayer-grpc-listen-addr") }}{{ splitList ":" (index . "relayer-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
            protocol: TCP

    ports:
      relayer-grpc:
        containerPort: '{{ with .Pod.fireeth.config }}{{ if (index . "relayer-grpc-listen-addr") }}{{ splitList ":" (index . "relayer-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
        protocol: TCP

  index-builder:
    fireeth:
      config:
        index-builder-grpc-listen-addr: "0.0.0.0:10009"
        index-builder-index-size: "1000"

    service:
      enabled: true
      spec:
        ports:
          index-builder-grpc:
            port: '{{ with .Pod.fireeth.config }}{{ if (index . "index-builder-grpc-listen-addr") }}{{ splitList ":" (index . "index-builder-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
            protocol: TCP

    ports:
      index-builder-grpc:
        containerPort: '{{ with .Pod.fireeth.config }}{{ if (index . "index-builder-grpc-listen-addr") }}{{ splitList ":" (index . "index-builder-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
        protocol: TCP

  reader-node:
    kind: StatefulSet

    fireeth:
      config:
        reader-node-grpc-listen-addr: "0.0.0.0:10010"
        reader-node-manager-api-addr: "127.0.0.1:10011"
        reader-node-data-dir: "/var/lib/geth"
        reader-node-path: "/app/geth"

    node:
      metrics:
        enabled: true
        addr: 0.0.0.0
        port: 6061
      args:
        __prefix: "--"
        __separator: "="
        syncmode: "full"
        snapshot: "true"
        http: "__none"
        http.api: net,web3,eth,debug
        http.addr: 0.0.0.0
        http.vhosts: "*"
        metrics.addr: 0.0.0.0
        metrics.port: 6061
        authrpc.port: 8551
        authrpc.jwtsecret: /jwt/jwt.hex
        authrpc.addr: 0.0.0.0
        authrpc.vhosts: '*'
        datadir: "{node-data-dir}"
        firehose-enabled: "__none"
        port: EXTERNAL_PORT
        discovery.port: EXTERNAL_PORT
        nat: "extip:EXTERNAL_IP"
        sepolia: "__none"
        networkid: 11155111
        txlookuplimit: 1000
        cache: 8192
        maxpeers: 100

    configMap:
      useEnvSubst: true

    env:
      MANAGER_API_PORT: '{{ splitList ":" ( index .Pod.fireeth.config "reader-node-manager-api-addr" ) | last }}'

    service:
      spec:
        ports:
          reader-node-grpc:
            port: '{{ with .Pod.fireeth.config }}{{ if (index . "reader-node-grpc-listen-addr") }}{{ splitList ":" (index . "reader-node-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
            protocol: TCP
          node-metrics:
            port: 6061
            protocol: TCP
          node-auth:
            port: 8551
            protocol: TCP
          node-mgr:
            port: '{{ splitList ":" ( index .Pod.fireeth.config "reader-node-manager-api-addr" ) | last | int }}'
            protocol: TCP

    # -- Container ports
    ports:
      reader-node-grpc:
        containerPort: '{{ with .Pod.fireeth.config }}{{ if (index . "reader-node-grpc-listen-addr") }}{{ splitList ":" (index . "reader-node-grpc-listen-addr") | last | int }}{{ else }}{{ nil }}{{ end }}{{ end }}'
        protocol: TCP

    # -- Init containers configuration
    initContainers:
      10-init-nodeport:
        image: lachlanevenson/k8s-kubectl:v1.25.4
        imagePullPolicy: IfNotPresent
        resources: {}
      20-init-snapshot:
        image: rclone/rclone:1.67.0
        imagePullPolicy: IfNotPresent
        resources: {}

    volumeClaimTemplates:
      data-dir:
        enabled: true
        metadata:
          labels: {}
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "standard"
          resources:
            requests:
              storage: 50Gi

    volumes:
      data-dir:
        emptyDir: null
        persistentVolumeClaim:
          claimName: data-dir

    lifecycle:
      preStop:
        exec:
          command: ["/usr/local/bin/eth-maintenance"]


firehoseComponents:
  grpc:
    enabled: true

    replicas: 1
    nameOverride: ""
    fullnameOverride: ""
    existingConfigMap: ""

    # -- Firehose-specific configuration
    fireeth:
      services:
        - firehose

  relayer:
    enabled: true

    replicas: 1
    nameOverride: ""
    fullnameOverride: ""

    fireeth:
      services:
        - relayer

  merger:
    enabled: true

    fireeth:
      services:
        - merger

  index-builder:
    enabled: true

    # -- Firehose-specific configuration
    fireeth:
      services:
        - index-builder

  reader-node:
    enabled: true

    replicas: 1
    nameOverride: ""
    fullnameOverride: ""

    # -- Firehose-specific configuration
    fireeth:
      services:
        - reader-node

    node:
      # -- JWT for clients to authenticate with the Engine API. Specify either `existingSecret` OR `fromLiteral`.
      jwt:
        # -- Load the JWT from an existing Kubernetes Secret. Takes precedence over `fromLiteral` if set.
        existingSecret: &jwt
          # -- Name of the Secret resource in the same namespace
          name: null
          # -- Data key for the JWT in the Secret
          key: null
        # -- Use this literal value for the JWT
        fromLiteral: 1ce5c87e81573667e685eae935d988a92742d5f466d696605cc207a36389c480

    # -- Persistence configuration
    persistence:
      enabled: true
      reader_node:
        # -- Access modes for the persistent volume
        accessModes: ["ReadWriteOnce"]
        # -- The storage class to use when provisioning a persistent volume
        storageClassName: openebs-zfs-localpv-compressed-8k
        resources:
          requests:
            # -- The amount of disk space to provision
            storage: 3Ti

    # Additional reader-node specific configurations
    p2p:
      # -- Expose P2P port via NodePort
      enabled: false
      type: NodePort
      # -- NodePort to be used. Must be unique.
      port: 32310

    dataDir: "/var/lib/geth"
    nodePath: "/usr/lib/geth"

    initSnapshot:
      enabled: false
      env:
        SNAPSHOT_REMOTE_LOCATION: "add_snapshot_location"

    p2pNodePort:
      # -- Expose P2P port via NodePort
      enabled: true
      # -- NodePort to be used. Must be unique.
      port: 32310
      initContainer:
        image:
          # -- Container image to fetch nodeport information
          repository: lachlanevenson/k8s-kubectl
          # -- Container tag
          tag: v1.25.4
          # -- Container pull policy
          pullPolicy: IfNotPresent

