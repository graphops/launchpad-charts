{{- $values := $.Values.statefulNode }}
{{- $componentName := "stateful-node" }}
{{- $componentLabel := include "erigon.componentLabelFor" $componentName }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "erigon.fullname" . }}-{{ $componentName }}
  labels:
    {{- include "erigon.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "erigon.fullname" . }}-{{ $componentName }}-headless
replicas: {{ include "erigon.replicas" $values }}
  selector:
    matchLabels:
      {{- include "erigon.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  volumeClaimTemplates: # TODO support using an existing PV/PVC?
    - metadata:
        name: storage
      spec:
        {{- toYaml $values.volumeClaimSpec | nindent 8 }}
  template:
    metadata:
      {{- with $values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "erigon.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "erigon.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      volumes:
        - name: tmp # this is to provide a writable /tmp even with securityContext.readOnlyRootFilesystem=true
          emptyDir: {}
      {{- if $values.p2pNodePort.enabled }}
        - name: env-nodeport
          emptyDir: {}
      {{- end }}
      initContainers:
      {{- if $values.p2pNodePort.enabled }}
        - name: {{ $componentName }}-nodeport
          image: "{{ $values.p2pNodePort.initContainer.image.repository }}:{{ $values.p2pNodePort.initContainer.image.tag }}"
          imagePullPolicy: {{ $values.p2pNodePort.initContainer.image.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
              echo "EXTERNAL_PORT=$EXTERNAL_PORT" >  /env/init-nodeport;
              echo "EXTERNAL_IP=$EXTERNAL_IP"     >> /env/init-nodeport;
              cat /env/init-nodeport;
          volumeMounts:
            - name: env-nodeport
              mountPath: /env
      {{- end }}
        # TODO: Move this out of chart and into a separate DaemonSet that sets this on every host
        - name: {{ $componentName }}-init
          image: busybox:stable
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "set -ex; ulimit -n 65536; ulimit -a"]
          securityContext:
            privileged: true #Â required for ulimit change
      containers:
        - name: {{ $componentName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          command:
            - sh
            - -ac
            - >
            {{- if $values.p2pNodePort.enabled }}
              . /env/init-nodeport;
            {{- end }}
              exec erigon
                --private.api.addr=0.0.0.0:9090
                --http
                --http.addr=0.0.0.0
                --authrpc.addr=0.0.0.0
                --healthcheck
                --metrics
                --metrics.addr=0.0.0.0
                --http.vhosts=*
                --datadir=/storage
              {{- if $values.p2pNodePort.enabled }}
                --nat=extip:${EXTERNAL_IP}
                --port=${EXTERNAL_PORT}
              {{- else }}
                --nat=extip:$(POD_IP)
                --port={{ include "erigon.p2pPort" . }}
              {{- end }}
              {{- with $values.extraArgs }}
                {{- . | nindent 16 }}
              {{- end }}
          ports:
            - name: grpc-erigon
              containerPort: 9090
              protocol: TCP
            - name: http-metrics
              containerPort: 6060
              protocol: TCP
            - name: http-jsonrpc
              containerPort: 8545
              protocol: TCP
            - name: http-engineapi
              containerPort: 8550
              protocol: TCP
            - name: udp-p2p
              containerPort: {{ include "erigon.p2pPort" $values }}
              protocol: UDP
            - name: tcp-p2p
              containerPort: {{ include "erigon.p2pPort" $values }}
              protocol: TCP
            - name: udp-torrent
              containerPort: 42069
              protocol: UDP
            - name: tcp-torrent
              containerPort: 42069
              protocol: TCP
          volumeMounts:
            {{- if $values.p2pNodePort.enabled }}
            - name: env-nodeport
              mountPath: /env
            {{- end }}
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
          readinessProbe:
            # This currently requires GRPCContainerProbe feature gate to be enabled on the kubelet
            # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-grpc-liveness-probe
            # https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
            grpc:
              port: 9090 # named ports not supported yet by grpc probes
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
