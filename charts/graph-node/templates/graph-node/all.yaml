{{/* In order to keep the looping in one place, this file contains all
     resources to be created for each group of Graph Nodes */}}

{{/* First, let's generate create the configuration for all Graph node instances */}}
{{/* Here we construct the computed template variables that can be interpolated
     into the graph node config file */}}
{{- $indexPools := dict }}
{{- range $groupName, $groupValues := $.Values.graphNodeGroups }}
  {{- $values := deepCopy $groupValues | mustMergeOverwrite (deepCopy $.Values.graphNodeDefaults) }}
  {{- if $values.enabled }}
    {{- range $indexPoolName := $values.includeInIndexPools }}
      {{- $indexPoolNodeIds := default list (get $indexPools $indexPoolName) }}
      {{- range $replicaNumber := until (int $values.replicaCount) }}
        {{- $nodeId := print (include "graph-node.fullname" $) "-" $groupName "-" $replicaNumber }} # This replacement also happens in the default configTemplate in values.yaml
        {{- $indexPoolNodeIds = append $indexPoolNodeIds $nodeId }}
      {{- end }}
      {{- $_ := set $indexPools $indexPoolName $indexPoolNodeIds }}
    {{- end }}
  {{- end }}
{{- end }}
{{/* Here we inject the computed template variables into the context */}}
{{- $computed := dict "indexPools" $indexPools }}
{{- $_ := set . "computed" $computed }}
{{/* Here we print out computed template variables that are available to help
     with debugging */}}
### Computed Template Variables:
#{{ toYaml $computed | indent 1 | replace "\n" "\n#" }}
{{/* Finally, let's render the template and generate the ConfigMap resource */}}
{{- $configTemplate := .Values.configTemplate }}
{{- $configToml := print (tpl $configTemplate $) }}
{{/* We use a hash of the configuration to automate restarts of dependents */}}
{{- $graphNodeConfigHash := $configToml | sha256sum }}
{{/* START ConfigMap */}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "graph-node.fullname" . }}-config
  labels:
    {{- include "graph-node.labels" . | nindent 4 }}
data:
  config.toml: |
    {{ $configToml | nindent 4 }}
{{/* END ConfigMap */}}

{{/* Finally, we render out the resources for our Graph Node groups */}}
{{- range $groupName, $groupValues := $.Values.graphNodeGroups }}
{{- $values := deepCopy $groupValues | mustMergeOverwrite (deepCopy $.Values.graphNodeDefaults) }}
{{- if $values.enabled }}
{{- $componentLabel := include "graph-node.componentLabelFor" $groupName }}
{{/* The outer range seems to mess with the inner context and break helpers.
       The with below resets the inner context to the root ($) */}}
{{- with $ }}
{{/* START StatefulSet/Deployment */}}
---
apiVersion: apps/v1
kind: {{ $values.kind }}
metadata:
  name: {{ include "graph-node.fullname" . }}-{{ $groupName }}
  labels:
    {{- include "graph-node.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "graph-node.fullname" . }}-{{ $groupName }}-headless
  replicas: {{ $values.replicaCount | default 1 }}
  {{- if (eq $values.kind "StatefulSet") }}
  podManagementPolicy: Parallel # https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#parallel-pod-management
  {{- end }}
  updateStrategy:
    type: RollingUpdate # https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    # Requires k8s 1.24+
    # rollingUpdate:
    #   maxUnavailable: 25% # This ensures that despite the Parallel podManagementStrategy, updates don't cause service downtime
    #   partition: 0
  selector:
    matchLabels:
      {{- include "graph-node.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config.toml: {{ $graphNodeConfigHash }}
      {{- with $values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "graph-node.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "graph-node.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if (eq $values.env.node_role "query-node") }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSecondsQueryNode | default "60" }}
      {{- else }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "0" }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ include "graph-node.fullname" . }}-config
      initContainers:
        - name: {{ $groupName }}-init
          image: lachlanevenson/k8s-kubectl:v1.25.4
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- if ne $groupName $.Values.blockIngestorGroupName }}
            - name: DISABLE_BLOCK_INGESTOR
              value: "true"
          {{- end }}
          {{- range $key, $val := $values.env }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
          {{- range $key, $val := $values.secretEnv }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $val.secretName | quote }}
                  key: {{ $val.key | quote }}
                  optional: false
          {{- end }}
          command:
            - sh
            - -c
            - |
              {{- if $.Values.grafana.datasources }}
              {{- if eq $groupName $.Values.grafana.datasourcesGraphNodeGroupName }}
              apply_grafana_datasources(){
              echo "Grafana Datasource creation enabled for this group, {{ $groupName }}"
              {{- range $storeName, $storeValues := $.Values.store }}
              {{- if $storeValues.enabled }}
              connection_string="{{ $storeValues.connection }}"
              if [[ $connection_string == postgresql://* ]]; then
                prefix_removed=${connection_string#postgresql://}
              elif [[ $connection_string == postgres://* ]]; then
                prefix_removed=${connection_string#postgres://}
              else
                echo "Invalid connection string "$connection_string", unable to parse and create Grafana Data Source Secret."
                return
              fi
              user=$(echo $prefix_removed | sed -n 's,^\([^:@]*\).*,\1,p')
              password=$(echo $prefix_removed | sed -n 's,^.*:\([^@]*\)@.*,\1,p')
              host=$(echo $prefix_removed | sed -n 's,^.*@\([^:/]*\).*,\1,p')
              port=$(echo $prefix_removed | sed -n 's,^.*@[^:]*:\([^/]*\).*,\1,p')
              database=$(echo $prefix_removed | sed -n 's,^.*/\(.*\),\1,p')
              host="$host.{{ $.Release.Namespace }}"
              secret_value=$(
              cat <<EOL | base64 | tr -d '\n'
              apiVersion: 1
              datasources:
              - name: {{ $.Release.Namespace }}-graph-node-store-{{ $storeName }}
                uid: {{ sha256sum (printf "%s-graph-node-store-%s" $.Release.Namespace $storeName) | trunc 40 }}
                type: postgres
                url: "$host"
                port: "$port"
                database: "$database"
                user: "$user"
                secureJsonData:
                  password: "$password"
              EOL
              )
              cat <<EOL > "{{ $storeName }}.yaml"
              apiVersion: v1
              kind: Secret
              metadata:
                name: graph-node-{{ $storeName }}-datasource
                labels:
                  {{ $.Values.grafana.datasourcesSecretLabel }}: {{ $.Values.grafana.datasourcesSecretLabelValue | quote }}
                  namespace: {{ $.Release.Namespace }}
              data:
                datasource-graph-node-store-{{ $storeName }}.yaml: "$secret_value"
              EOL
              {{- end }}
              {{- end }}
              unset connection_string user password host port database prefix_removed
              {{- range $storeName, $storeValues := $.Values.store }}
              (set -x; kubectl apply -f "{{ $storeName }}.yaml")
              {{- end }}
              }
              apply_grafana_datasources
              {{- else }}
              echo "Grafana Datasource creation enabled for {{ $.Values.grafana.datasourcesGraphNodeGroupName }}, not this group, {{ $groupName }}. Skipping..."
              {{- end }}
              {{- end }}
              set -ex
              ulimit -n 65536
              ulimit -a

          securityContext:
            privileged: true # required for ulimit change
        {{- with $values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ $groupName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          command:
            - graph-node
            - --node-id=$(NODE_ID)
            - --config=/config/config.toml
            {{- with $values.extraArgs }}
              {{- toYaml (. | default list) | nindent 12 }}
            {{- end }}
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- if ne $groupName $.Values.blockIngestorGroupName }}
            - name: DISABLE_BLOCK_INGESTOR
              value: "true"
          {{- end }}
          {{- range $key, $val := $values.env }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
          {{- range $key, $val :=  $values.secretEnv }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $val.secretName | quote }}
                  key: {{ $val.key | quote }}
                  optional: false
          {{- end }}
          ports:
            - name: http-query
              containerPort: 8000
              protocol: TCP
            - name: http-queryws
              containerPort: 8001
              protocol: TCP
            - name: http-admin
              containerPort: 8020
              protocol: TCP
            - name: http-status
              containerPort: 8030
              protocol: TCP
            - name: http-metrics
              containerPort: 8040
              protocol: TCP
          volumeMounts:
          - name: config
            mountPath: "/config"
            readOnly: true
          readinessProbe:
            httpGet:
              port: http-query
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with $values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $groupName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{/* END StatefulSet/Deployment */}}
{{/* START Services */}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "graph-node.fullname" . }}-{{ $groupName }}-headless
  labels:
    {{- include "graph-node.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  clusterIP: None # Headless service
  ports:
  {{- range $portName, $portNumber := $values.service.ports }}
    - port: {{ $portNumber }} # the port we expose on the Service, user configurable
      targetPort: {{ $portName }} # the name of the port on the container that we are routing to
      protocol: TCP
      name: {{ $portName }}
  {{- end }}
  selector:
    {{- include "graph-node.selectorLabels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  {{- if $values.service.topologyAwareRouting.enabled }}
  annotations:
    {{- if semverCompare ">= 1.27-0" .Capabilities.KubeVersion.GitVersion }}
    service.kubernetes.io/topology-mode: "auto"
    {{- else }}
    service.kubernetes.io/topology-aware-hints: "auto"
    {{- end }}
  {{- end }}
  name: {{ include "graph-node.fullname" . }}-{{ $groupName }}
  labels:
    {{- include "graph-node.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
    serviceMonitorTarget: "true" # Additional label to prevent matching the headless service
spec:
  type: {{ $values.service.type }}
  ports:
  {{- range $portName, $portNumber := $values.service.ports }}
    - port: {{ $portNumber }} # the port we expose on the Service, user configurable
      targetPort: {{ $portName }} # the name of the port on the container that we are routing to
      protocol: TCP
      name: {{ $portName }}
  {{- end }}
  selector:
    {{- include "graph-node.selectorLabels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
{{/* END Services */}}
{{/* START ServiceMonitor */}}
{{- if $.Values.prometheus.serviceMonitors.enabled }}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "graph-node.fullname" . }}-{{ $groupName }}
  labels:
    {{- include "graph-node.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  jobLabel: "{{ .Release.Name }}"
  selector:
    matchLabels:
      {{- include "graph-node.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
      serviceMonitorTarget: "true" # Additional label to prevent matching the headless service
  endpoints:
    - port: http-metrics
      {{- with .Values.prometheus.serviceMonitors.interval }}
      interval: {{ . }}
      {{- end }}
      {{- with .Values.prometheus.serviceMonitors.scrapeTimeout }}
      scrapeTimeout: {{ . }}
      {{- end }}
      honorLabels: true
      {{- with .Values.prometheus.serviceMonitors.relabelings }}
      relabelings:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.prometheus.serviceMonitors.metricRelabelings }}
      metricRelabelings:
      {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
{{/* END ServiceMonitor */}}
{{- else }}
---
# {{ $groupName }} group is not enabled
{{- end }}
{{- end }}
