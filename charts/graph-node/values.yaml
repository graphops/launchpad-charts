# Default values for graph-node.
# This is a YAML-formatted file.

nameOverride: ""
fullnameOverride: ""

image:
  # -- Image for Graph Node
  repository: graphprotocol/graph-node
  pullPolicy: IfNotPresent
  # -- Overrides the image tag
  # @default -- Chart.appVersion
  tag: ""

# -- Pull secrets required to fetch the Image
imagePullSecrets: []

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

prometheus:
  serviceMonitors:
    # -- Enable monitoring by creating `ServiceMonitor` CRDs ([prometheus-operator](https://github.com/prometheus-operator/prometheus-operator))
    enabled: false
    labels: {}
    interval:
    scrapeTimeout:
    relabelings: []

grafana:
  # -- Enable creation of Grafana dashboards. [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart) must be configured to search this namespace, see `sidecar.dashboards.searchNamespace`
  dashboards: false
  # -- Must match `sidecar.dashboards.label` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabel: grafana_dashboard
  # -- Must match `sidecar.dashboards.labelValue` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabelValue: ""

# -- [Configuration for graph-node](https://github.com/graphprotocol/graph-node/blob/master/docs/config.md)
# @default -- See default template in [values.yaml](values.yaml)
configTemplate: |
    [store]
    [store.primary]
    connection = "postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
    # weight = 0
    pool_size = 10
    [chains]
    ingestor = "{{ print (include "graph-node.fullname" $) "-" $.Values.blockIngestorGroupName "-" 0 }}"
    [chains.mainnet]
    shard = "primary"
    provider = [
      { label = "eth-mainnet", url = "${ETH_MAINNET_RPC_URL}", features = [ "archive", "traces" ] }
    ]
    [deployment]
    # Deployment rules match top to bottom
    [[deployment.rule]]
    # DEFAULT RULE
    # There's no 'match' field, so any subgraph that hasn't matched above, matches this rule
    shards = ["primary"]
    indexers = {{ toJson .computed.indexPools.default }}

# -- Default values for all Group Node Groups
graphNodeDefaults:
  # -- Enable the group
  enabled: true

  # -- The number of nodes to run in the group
  replicaCount: 1

  # -- List of Index Pools to include nodes in the group in
  includeInIndexPools: []

  # -- Additional CLI arguments to pass to Graph Node
  extraArgs: []

  # Increasing the grace termination period prevents Kubernetes
  # from killing the node process prematurely. Premature shutdown
  # can lead to data integrity issues
  # -- Amount of time to wait before force-killing the Erigon process
  terminationGracePeriodSeconds: 60

  # -- Annotations for the `Pod`
  podAnnotations: {}

  # -- Pod-wide security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 101337
    runAsGroup: 101337
    fsGroup: 101337

  service:
    type: ClusterIP
    ports:
      # Valid keys are names of ports that are exposed by the Pod that (see templates/stateful-node/statefulset.yaml)
      # -- Service Port to expose Graph Node Query endpoint on
      http-query: 8000
      # -- Service Port to expose Graph Node Websocket Query endpoint on
      http-queryws: 8001
      # -- Service Port to expose Graph Node Admin endpoint on
      http-admin: 8020
      # -- Service Port to expose Graph Node Status endpoint on
      http-status: 8030
      # -- Service Port to expose Graph Node Metrics endpoint on
      http-metrics: 8040

  # -- Specify [resource requests and limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits) for each node in the group
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi

  # -- Specify a [node selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)
  nodeSelector: {}

  # -- Specify [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []

  affinityPresets:
    # -- Create anti-affinity rule to deter scheduling replicas on the same host
    antiAffinityByHostname: true

  affinity: {}

  # -- Environment variables for Graph Node
  env:
    PGHOST: ""
    PGPORT: 5432
    PGDATABASE: ""
    ETH_MAINNET_RPC_URL: ""
    IPFS: ""

  # -- Environment variables that come from `Secret`s
  secretEnv:
    PGUSER:
      secretName:
      key:
    PGPASSWORD:
      secretName:
      key:

# -- Name of the Graph Node Group that should be the block ingestor. Only the first node instance (with index 0) will be configured as the block ingestor.
blockIngestorGroupName: block-ingestor

# -- Groups of Graph Nodes to deploy
graphNodeGroups:
  block-ingestor:
    enabled: true
    replicaCount: 1
    includeInIndexPools: []
    env:
      NODE_ROLE: index-node
  index:
    enabled: true
    replicaCount: 1
    includeInIndexPools:
      - default
    env:
      NODE_ROLE: index-node
  query:
    enabled: true
    replicaCount: 1
    env:
      NODE_ROLE: query-node
