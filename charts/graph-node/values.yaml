# Default values for graph-node.
# This is a YAML-formatted file.

nameOverride: ""
fullnameOverride: ""

image:
  # -- Image for Graph Node
  repository: graphprotocol/graph-node
  pullPolicy: IfNotPresent
  # -- Overrides the image tag
  # @default -- Chart.appVersion
  tag: ""

# -- Pull secrets required to fetch the Image
imagePullSecrets: []

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

prometheus:
  serviceMonitors:
    # -- Enable monitoring by creating `ServiceMonitor` CRDs ([prometheus-operator](https://github.com/prometheus-operator/prometheus-operator))
    enabled: false
    labels: {}
    interval:
    scrapeTimeout:
    relabelings: []

grafana:
  # -- Enable creation of Grafana dashboards. [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart) must be configured to search this namespace, see `sidecar.dashboards.searchNamespace`
  dashboards: false
  # -- Must match `sidecar.dashboards.label` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabel: grafana_dashboard
  # -- Must match `sidecar.dashboards.labelValue` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabelValue: ""

toolbox:
  # -- Enable deployment of a toolbox container containing preconfigured tools to interact with graph-node and the database
  enabled: true
  image:
    repository: graphprotocol/graph-node # replace with toolbox repo
    pullPolicy: IfNotPresent
    # -- Overrides the image tag
    tag: "" # replace with tag
    # -- Annotations for the `Pod`
  podAnnotations: {}

  # -- Pod-wide security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 101337
    runAsGroup: 101337
    fsGroup: 101337

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  env: {}

  secretEnv: {}

# -- [Configuration for graph-node](https://github.com/graphprotocol/graph-node/blob/master/docs/config.md)
graphNodeConfigTemplate: |
    [store]
    [store.primary]
    connection = "postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
    # weight = 0
    pool_size = 10
    [chains]
    ingestor = "block-ingestor"
    [chains.mainnet]
    shard = "primary"
    provider = [
      { label = "eth-mainnet", url = "${ETH_MAINNET_RPC_URL}", features = [ "archive", "traces" ] }
    ]
    [deployment]
    # Deployment rules match top to bottom
    [[deployment.rule]]
    # DEFAULT RULE
    # There's no 'match' field, so any subgraph that hasn't matched above, matches this rule
    shards = ["primary"]
    indexers = {{ toJson .generated.indexPools.default }}

graphNodeDefaults:
  enabled: true

  replicaCount: 1

  includeInIndexPools:
    - default

  # -- Additional CLI arguments to pass to Graph Node
  extraArgs: []

  # Increasing the grace termination period prevents Kubernetes
  # from killing the node process prematurely. Premature shutdown
  # can lead to data integrity issues
  # -- Amount of time to wait before force-killing the Erigon process
  terminationGracePeriodSeconds: 60

  # -- Annotations for the `Pod`
  podAnnotations: {}

  # -- Pod-wide security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 101337
    runAsGroup: 101337
    fsGroup: 101337

  service:
    type: ClusterIP
    ports:
      # Valid keys are names of ports that are exposed by the Pod that (see templates/stateful-node/statefulset.yaml)
      # -- Service Port to expose Graph Node Query endpoint on
      http-query: 8000
      # -- Service Port to expose Graph Node Websocket Query endpoint on
      http-queryws: 8001
      # -- Service Port to expose Graph Node Admin endpoint on
      http-admin: 8020
      # -- Service Port to expose Graph Node Status endpoint on
      http-status: 8030
      # -- Service Port to expose Graph Node Metrics endpoint on
      http-metrics: 8040

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi

  nodeSelector: {}

  tolerations: []

  affinityPresets:
    antiAffinityByHostname: true

  affinity: {}

  env:
    PGHOST:
    PGPORT: 5432
    PGDATABASE:
    ETH_MAINNET_RPC_URL:

  secretEnv:
    PGUSER:
      secretName: postgres-config
      key: username
    PGPASSWORD:
      secretName: postgres-config
      key: password

graphNodeGroups:
  block-ingestor:
    replicaCount: 1
    includeInIndexPools: []
    env:
      NODE_ROLE: index-node
