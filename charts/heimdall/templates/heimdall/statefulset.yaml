{{- $values := $.Values.heimdall }}
{{- $componentName := "heimdall" }}
{{- $componentLabel := include "heimdall.componentLabelFor" $componentName }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "heimdall.fullname" . }}-{{ $componentName }}
  labels:
    {{- include "heimdall.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "heimdall.fullname" . }}-{{ $componentName }}-headless
  replicas: {{ $values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "heimdall.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  volumeClaimTemplates: # TODO support using an existing PV/PVC?
    - metadata:
        name: storage
      spec:
        {{- toYaml $values.volumeClaimSpec | nindent 8 }}
  template:
    metadata:
      {{- with $values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "heimdall.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "heimdall.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      volumes:
        - name: tmp # this is to provide a writable /tmp even with securityContext.readOnlyRootFilesystem=true
          emptyDir: {}
        - name: genesis-config
          configMap:
            name: {{ include "heimdall.fullname" . }}-{{ $componentName }}
      initContainers:
        - name: {{ $componentName }}-init
          image: "{{ $values.image.repository }}:{{ $values.image.tag }}"
          imagePullPolicy: {{ $values.image.pullPolicy }}
          # securityContext:
          #   readOnlyRootFilesystem: false
          #   capabilities:
          #     drop:
          #       - ALL
          # command: ["sh", "-c", "HEIMDALL_DIR=/storage /root/heimdall/docker/entrypoint.sh start"]
          command:
            - sh
            - -c
            - |
              set -ex

              HEIMDALLD_HOME="/storage"

              # If config hasn't been boostrapped already, do it
              if [ ! -f "$HEIMDALLD_HOME/config/config.toml" ]; then
                # Write out init config for Heimdall
                heimdalld --home $HEIMDALLD_HOME init
              fi

              # Replace init genesis with desired network genesis
              cp /genesis-config/genesis.json $HEIMDALLD_HOME/config/genesis.json

              cd $HEIMDALLD_HOME/config

              # Patch config.toml
              sed -i "s#^cors_allowed_origins.*#cors_allowed_origins = [\"*\"]#" config.toml
              sed -i "s#^seeds.*#seeds = \"${BOOTNODES:-"f4f605d60b8ffaaf15240564e58a81103510631c@159.203.9.164:26656,4fb1bc820088764a564d4f66bba1963d47d82329@44.232.55.71:26656,2eadba4be3ce47ac8db0a3538cb923b57b41c927@35.199.4.13:26656,3b23b20017a6f348d329c102ddc0088f0a10a444@35.221.13.28:26656,25f5f65a09c56e9f1d2d90618aa70cd358aa68da@35.230.116.151:26656"}\"#" config.toml
              sed -i "s#^prometheus = false#prometheus = true#" config.toml

              # If ETH1_RPC_URL is set, patch in eth1
              if [ "${ETH1_RPC_URL}" != "" ]; then
                # Patch heimdall-config.toml
                sed -i "s#^eth_rpc_url.*#eth_rpc_url = \"${ETH1_RPC_URL}\"#" heimdall-config.toml
              fi

              # If enabled and snapshot URL has been provided, bootstrap snapshot
              if [ "${BOOTSTRAP}" = 1 ] && [ "${SNAPSHOT_URL}" != "" ]; then
                if [ ! -f "$HEIMDALLD_HOME/from_snapshot" ] || [ "$(cat $HEIMDALLD_HOME/from_snapshot)" != "${SNAPSHOT_URL}" ]; then
                  mkdir -p ${HEIMDALLD_HOME}/data
                  wget -c "${SNAPSHOT_URL}" -O - | tar -xz -C ${HEIMDALLD_HOME}/data
                  echo "${SNAPSHOT_URL}" > ${HEIMDALLD_HOME}/from_snapshot
                fi
              fi
          volumeMounts:
            - name: storage
              mountPath: /storage
            - name: genesis-config
              mountPath: /genesis-config
          env:
          {{- if $values.fromSnapshot.enabled }}
            - name: BOOTSTRAP
              value: "1"
            - name: SNAPSHOT_URL
              value: {{ $values.fromSnapshot.snapshotUrl }}
          {{- end }}
          {{- with $values.env }}
          {{- range $key, $val := .}}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}

      containers:
        - name: {{ $componentName }}
          image: "{{ $values.image.repository }}:{{ $values.image.tag }}"
          imagePullPolicy: {{ $values.image.pullPolicy }}
          # securityContext:
          #   readOnlyRootFilesystem: true
          #   capabilities:
          #     drop:
          #       - ALL
          command:
            - sh
            - -c
            - |
              set -x

              export HEIMDALL_DIR=/storage

              exec heimdalld start \
                {{- range $arg := $values.extraArgs }}
                  {{- $arg  | nindent 16 }} \
                {{- end }}
                --home=$HEIMDALL_DIR \
                --rpc.laddr=tcp://0.0.0.0:26657 \
                --p2p.upnp=false
          ports:
            - name: http-trpc # Tendermint RPC
              containerPort: 26657
              protocol: TCP
            - name: udp-p2p
              containerPort: 26656
              protocol: UDP
            - name: tcp-p2p
              containerPort: 26656
              protocol: TCP
            - name: http-metrics
              containerPort: 26660
              protocol: TCP
          volumeMounts:
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
          {{- with $values.env }}
          env:
          {{- range $key, $val := .}}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
          # readinessProbe:
          #   # This currently requires GRPCContainerProbe feature gate to be enabled on the kubelet
          #   # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-grpc-liveness-probe
          #   # https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
          #   grpc:
          #     port: 9090 # named ports not supported yet by grpc probes
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        - name: {{ $componentName }}-rest-server
          image: "{{ $values.image.repository }}:{{ $values.image.tag }}"
          imagePullPolicy: {{ $values.image.pullPolicy }}
          # securityContext:
          #   readOnlyRootFilesystem: false
          #   capabilities:
          #     drop:
          #       - ALL
          command: # TODO chain ID should be based on network selection
            - sh
            - -c
            - |
              set -x;

              export HEIMDALL_DIR=/storage;

              exec heimdalld rest-server \
                {{- range $arg := $values.restServer.extraArgs }}
                  {{- $arg  | nindent 16 }} \
                {{- end }}
                --home=$HEIMDALL_DIR \
                --node=tcp://127.0.0.1:26657 \
                --trust-node=true \
                --max-open=1000 \
                --laddr=tcp://0.0.0.0:1317
          ports:
            # - name: http-metrics # TODO figure out metrics scraping, potentially with exporter sidecar, but hopefully its builtin
            #   containerPort: 6060
            #   protocol: TCP
            - name: http-rest
              containerPort: 1317
              protocol: TCP
          volumeMounts:
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
          {{- with $values.env }}
          env:
          {{- range $key, $val := .}}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
          # readinessProbe:
          #   # This currently requires GRPCContainerProbe feature gate to be enabled on the kubelet
          #   # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-grpc-liveness-probe
          #   # https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
          #   grpc:
          #     port: 9090 # named ports not supported yet by grpc probes
          {{- with $values.restServer.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
