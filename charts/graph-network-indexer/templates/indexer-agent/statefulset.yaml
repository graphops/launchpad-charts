{{ $values := mergeOverwrite (deepCopy .Values.indexerDefaults) (deepCopy .Values.indexerAgent) }}
{{- $componentName := "agent" }}
{{- $componentLabel := include "graph-network-indexer.componentLabelFor" $componentName }}

{{/* Compute command line arguments */}}
{{- $args := dict }}
{{/* Populate base arguments */}}
{{- $_ := set $args "graph-node-query-endpoint" (dict "value" $values.config.graph_node.query_url) }}
{{- $_ := set $args "graph-node-status-endpoint" (dict "value" $values.config.graph_node.status_url) }}
{{- $_ := set $args "indexer-address" (dict "value" $values.config.indexer.indexer_address "quote" true) }}

{{/* Add network subgraph configs if they exist */}}
{{- with (index $values.config "subgraphs.network") }}
{{- if hasKey . "query_url" }}
{{- $_ := set $args "network-subgraph-endpoint" (dict "value" .query_url "quote" true) }}
{{- end }}
{{- if hasKey . "deployment_id" }}
{{- $_ := set $args "network-subgraph-deployment" (dict "value" .deployment_id "quote" true) }}
{{- end }}
{{- end }}

{{/* Add escrow subgraph configs if they exist */}}
{{- with (index $values.config "subgraphs.escrow") }}
{{- if hasKey . "query_url" }}
{{- $_ := set $args "tap-subgraph-endpoint" (dict "value" .query_url "quote" true) }}
{{- end }}
{{- end }}

{{/* Add postgres configs */}}
{{- $_ := set $args "postgres-database" (dict "value" $values.postgresConfig.database) }}
{{- $_ := set $args "postgres-host" (dict "value" $values.postgresConfig.host) }}
{{- $_ := set $args "postgres-port" (dict "value" $values.postgresConfig.port) }}

{{/* Merge in indexerAgent.config values */}}
{{- with $.Values.indexerAgent.config }}
{{- range $key, $val := . }}
{{- if not (kindIs "invalid" $val) }}
{{- $_ := set $args $key (dict "value" $val) }}
{{- end }}
{{- end }}
{{- end }}

{{/* START StatefulSet */}}
---
apiVersion: apps/v1
kind: StatefulSet #Â StatefulSet is better behaved when trying to maintain a single instance of the agent. We never want more than one agent active at a time.
metadata:
  name: {{ include "graph-network-indexer.fullname" . }}-{{ $componentName }}
  labels:
    {{- include "graph-network-indexer.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "graph-network-indexer.fullname" . }}-{{ $componentName }}-headless
  replicas: 1 # Should only ever be one instance of indexer-agent
  selector:
    matchLabels:
      {{- include "graph-network-indexer.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  template:
    metadata:
      {{- with $values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "graph-network-indexer.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "graph-network-indexer.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      containers:
        - name: {{ $componentName }}
          image: "{{ $values.image.repository }}:{{ $values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ $values.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- if $values.env }}
          {{- range $key, $val := $values.env }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
          {{- if $values.secretEnv }}
          {{- range $key, $val := $values.secretEnv }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $val.secretName | quote }}
                  key: {{ $val.key | quote }}
          {{- end }}
          {{- end }}    
          args:
          {{- range $key, $val := $args }}
            - --{{ $key }}={{ if $val.quote }}{{ printf "%q" $val.value }}{{ else }}{{ $val.value }}{{ end }}
          {{- end }}
          {{- with $values.extraArgs }}
            {{- toYaml (. | default list) | nindent 12 }}
          {{- end }}
          ports:
            - name: http-mgmtapi
              containerPort: {{ index $.Values.indexerAgent.config "indexer-management-port" }}
              protocol: TCP
            {{- if $values.metrics.enabled }}
            - name: http-metrics
              containerPort: {{ $values.metrics.port }}
              protocol: TCP
            {{- end }}
          readinessProbe:
            httpGet:
              port: http-mgmtapi
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{/* END StatefulSet */}}
