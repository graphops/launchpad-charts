image: ghcr.io/graphops/docker-builds/init-toolbox:main
env:
  POD_NAME:
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  NODE_NAME:
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  SITES:
    value: "https://v4.ident.me https://api.ipify.org https://ifconfig.me"
  FILTER_KEY:
    value: type
  FILTER_VALUE:
    value: p2p
command:
  - sh
  - -c
  - |
    set -ex

    # Build the label selector string
    LABEL_SELECTOR="pod in (${POD_NAME})"

    # Add optional filter if both key and value are provided
    if [ -n "${FILTER_KEY}" ] && [ -n "${FILTER_VALUE}" ]; then
        LABEL_SELECTOR="${LABEL_SELECTOR}, ${FILTER_KEY} in (${FILTER_VALUE})"
    fi

    # Get the service that matches our filters
    SERVICE_PORTS=$(kubectl get services -l "${LABEL_SELECTOR}" -o jsonpath='{.items[0].spec.ports[*]}')

    # Get external IP using the same logic as before
    export EXTERNAL_IP=""
    until [ -n "$EXTERNAL_IP" ]; do
        for SITE in $SITES; do
            if [ -z "$EXTERNAL_IP" ]; then
                EXTERNAL_IP=$(curl --silent --max-time 5 "$SITE")
                if [ -n "$EXTERNAL_IP" ]; then
                    break
                fi
            fi
        done
        if [ -z "$EXTERNAL_IP" ]; then
            sleep 1
        fi
    done
    export EXTERNAL_IP=${EXTERNAL_IP:-"UNAVAILABLE"}

    # Initialize the output file
    > /env/init-nodeport

    # Write the external IP first
    echo "EXTERNAL_IP=$EXTERNAL_IP" >> /env/init-nodeport

    # Process each port in the service
    echo "$SERVICE_PORTS" | jq -c | while read -r port; do
        PORT_NAME=$(echo "$port" | jq -r '.name')
        NODE_PORT=$(echo "$port" | jq -r '.nodePort')

        # Convert port name to uppercase and replace hyphens with underscores for environment variable
        ENV_PORT_NAME=$(echo "$PORT_NAME" | tr '[:lower:]-' '[:upper:]_')

        # Write each port to the file
        echo "EXTERNAL_PORT_${ENV_PORT_NAME}=$NODE_PORT" >> /env/init-nodeport
    done

    # Display the results
    cat /env/init-nodeport
volumeMounts:
  env-dir:
    mountPath: /env
