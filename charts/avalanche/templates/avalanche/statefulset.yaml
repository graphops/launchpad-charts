{{- $values := $.Values.avalanche }}
{{- $componentName := "avalanche"}}
{{- $componentLabel := include "avalanche.componentLabelFor" $componentName }}
{{- $configTemplate := .Values.configTemplate }}
{{- $configToml := print (tpl $configTemplate $) }}
{{/* We use a hash of the configuration to automate restarts of dependents */}}
{{- $avalancheNodeConfigHash := $configToml | sha256sum }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "avalanche.fullname" . }}-{{ $componentName }}
  labels:
    {{- include "avalanche.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "avalanche.fullname" . }}-{{ $componentName }}-headless
  replicas: {{ include "avalanche.replicas" $values }}
  selector:
    matchLabels:
      {{- include "avalanche.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        {{- toYaml $values.volumeClaimSpec | nindent 8 }}
  template:
    metadata:
      annotations:
        checksum/config.toml: {{ $avalancheNodeConfigHash }}
      {{- with $values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "avalanche.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
        {{- with $values.extraLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "avalanche.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      volumes:
        - name: tmp # this is to provide a writable /tmp even with securityContext.readOnlyRootFilesystem=true
          emptyDir: {}
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ include "avalanche.fullname" . }}-{{ $componentName }}-config
      {{- if $values.p2pNodePort.enabled }}
        - name: env-nodeport
          emptyDir: {}
      {{- end }}
      initContainers:
      {{- if $values.p2pNodePort.enabled }}
        - name: init-nodeport
          image: "{{ $values.p2pNodePort.initContainer.image.repository }}:{{ $values.p2pNodePort.initContainer.image.tag }}"
          imagePullPolicy: {{ $values.p2pNodePort.initContainer.image.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              set -ex;
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
              export EXTERNAL_IP=${EXTERNAL_IP:-$(curl --silent v4.ident.me)};
              echo "EXTERNAL_PORT=$EXTERNAL_PORT" >  /env/init-nodeport;
              echo "EXTERNAL_IP=$EXTERNAL_IP"     >> /env/init-nodeport;
              cat /env/init-nodeport;
          volumeMounts:
            - name: env-nodeport
              mountPath: /env
      {{- end }}
      {{- if $values.initChownData.enabled }}
        - name: init-chown-data
          image: "{{ $values.initChownData.image.repository }}:{{ $values.initChownData.image.tag }}"
          imagePullPolicy: {{ $values.initChownData.image.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command:
            - sh
            - -ac
            - |
              set -ex;
              chown -R {{ $values.podSecurityContext.runAsUser }}:{{ $values.podSecurityContext.runAsGroup }} /storage;
              ls -lah /storage
          volumeMounts:
            - name: storage
              mountPath: "/storage"
      {{- end }}
      containers:
        - name: {{ $componentName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: false #Â avalanche needs to write to /avalanche
            capabilities:
              drop:
                - ALL
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command:
            - sh
            - -ac
            - |
            {{- if $values.p2pNodePort.enabled }}
              . /env/init-nodeport;
            {{- end }}
              set -ex;
              /avalanchego/build/avalanchego \
                --config-file=/config/config.toml \
                --data-dir=/storage \
                --api-metrics-enabled=true \
              {{- if $values.p2pNodePort.enabled }}
                --public-ip=$EXTERNAL_IP \
                --http-port=${EXTERNAL_PORT} \
              {{- else }}
                --http-port={{ include "avalanche.p2pPort" $values }} \
              {{- end }}
              {{- range $arg := $values.extraArgs }}
                {{- $arg | nindent 16 }} \
              {{- end }}
                --http-host=0.0.0.0
          ports:
            - name: http-metrics
              containerPort: 6060
              protocol: TCP
            - name: http-jsonrpc
              containerPort: 9650
              protocol: TCP
            - name: http-port
              containerPort: 9656
              protocol: TCP
            - name: udp-p2p
              containerPort: {{ include "avalanche.p2pPort" $values }}
              protocol: UDP
            - name: tcp-p2p
              containerPort: {{ include "avalanche.p2pPort" $values }}
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: "/config"
              readOnly: true
            {{- if $values.p2pNodePort.enabled }}
            - name: env-nodeport
              mountPath: /env
            {{- end }}
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
          readinessProbe:
            httpGet:
              path: /ext/health  # https://docs.avax.network/apis/avalanchego/apis/health
              port: 9650
            initialDelaySeconds: 5
            periodSeconds: 10
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
