{{- $values := $.Values.arbitrum }}
{{- $componentName := "arbitrum" }}
{{- $componentLabel := include "arbitrum-classic.componentLabelFor" $componentName }}
{{- $classicArgs := get (fromJson (include "arbitrum-classic.computedArgs" $values)) "computedArgs" }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "arbitrum-classic.fullname" . }}
  labels:
    {{- include "arbitrum-classic.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "arbitrum-classic.fullname" . }}-headless
  replicas: {{ include "arbitrum-classic.replicas" $values }}
  selector:
    matchLabels:
      {{- include "arbitrum-classic.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        {{- toYaml $values.volumeClaimSpec | nindent 8 }}
  template:
    metadata:
      {{- with $values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "arbitrum-classic.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
        {{- with $values.extraLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "arbitrum-classic.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      volumes:
        - name: tmp # this is to provide a writable /tmp even with securityContext.readOnlyRootFilesystem=true
          emptyDir: {}
      initContainers:
      {{- if $values.restoreSnapshot.enabled }}
        - name: init-snapshot
          image: ghcr.io/graphops/docker-builds/init-stream-download@sha256:acbe5bff3b273b6e56b7aad20e8368ab9ddb091250b744e41ad66d6e7c2d0901
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          volumeMounts:
            - name: storage
              mountPath: /storage
          env:
            - name: DIR
              value: "/storage"
            - name: RESTORE_SNAPSHOT
              value: {{ $values.restoreSnapshot.enabled | quote }}
            - name: SUBPATH
              value: {{ $values.restoreSnapshot.subpath }}
            - name: RM_SUBPATH
              value: {{ $values.restoreSnapshot.cleanSubpath | quote }}
            - name: URL
              value: {{ $values.restoreSnapshot.snapshotUrl }}
            - name: TAR_ARGS
              value: {{ $values.restoreSnapshot.extraTarArgs }}
            - name: CHUNK_SIZE
              value: {{ (mul $values.restoreSnapshot.chunkSize 1) | quote }} # Multiplying by 1 to circumvent float64 conversion leading to scientific notation (here: https://github.com/helm/helm/issues/1707)
          {{- with $values.env }}
          {{- range $key, $val := .}}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ $componentName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          command:
            - sh
            - -ac
            - |
              set -ex;
              exec arb-node \
                {{- range $val := initial $classicArgs }}
                {{ $val }} \
                {{- end }}
                {{ last $classicArgs }}
          ports:
            - name: http-rpc
              containerPort: {{ index $values.service.ports "http-rpc" }}
              protocol: TCP
            - name: ws-rpc
              containerPort: {{ index $values.service.ports "ws-rpc" }}
              protocol: TCP
            - name: http-metrics
              containerPort: {{ index $values.service.ports "http-metrics" }}
              protocol: TCP
          volumeMounts:
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
          readinessProbe:
            httpGet:
              port: {{ index $values.service.ports "http-rpc" }}
              path: /
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
