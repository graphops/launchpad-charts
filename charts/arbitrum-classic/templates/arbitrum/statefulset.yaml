{{- $values := $.Values.arbitrum }}
{{- $componentName := "arbitrum" }}
{{- $componentLabel := include "arbitrum-classic.componentLabelFor" $componentName }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "arbitrum-classic.fullname" . }}
  labels:
    {{- include "arbitrum-classic.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "arbitrum-classic.fullname" . }}-headless
  replicas: {{ include "arbitrum-classic.replicas" $values }}
  selector:
    matchLabels:
      {{- include "arbitrum-classic.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        {{- toYaml $values.volumeClaimSpec | nindent 8 }}
  template:
    metadata:
      {{- with $values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "arbitrum-classic.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
        {{- with $values.extraLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "arbitrum-classic.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      volumes:
        - name: tmp # this is to provide a writable /tmp even with securityContext.readOnlyRootFilesystem=true
          emptyDir: {}
      initContainers:
      {{- if $values.restoreSnapshot.enabled }}
        - name: init-snapshot
          image: busybox:stable
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true 
          command:
            - sh
            - -c
            - |
              set -x
              STORAGE_PATH="/storage"
              if [ "${SNAPSHOT_RESTORE_PATH}" == "" ]; then
                SNAPSHOT_RESTORE_PATH="$STORAGE_PATH/snapshots"
              else
                SNAPSHOT_RESTORE_PATH="${SNAPSHOT_RESTORE_PATH}"
              fi
              # If enabled and snapshot URL has been provided, restore snapshot
              if [ "${RESTORE_SNAPSHOT}" = "true" ] && [ "${SNAPSHOT_URL}" != "" ]; then
                echo "Snapshot restoration enabled"
                if [ ! -f "$STORAGE_PATH/from_snapshot" ] || [ "$(cat $STORAGE_PATH/from_snapshot)" != "${SNAPSHOT_URL}" ]; then
                  echo "Clearing existing chaindata..."
                  rm -rf "$SNAPSHOT_RESTORE_PATH"
                  echo "Downloading and extracting $SNAPSHOT_URL..."
                  mkdir -p "$SNAPSHOT_RESTORE_PATH"
                  wget -c --no-check-certificate -O - "${SNAPSHOT_URL}" | tar -xv -C "$SNAPSHOT_RESTORE_PATH"
                  [ "$?" != "0" ] && echo "Streaming download failed" && exit 1
                  echo "${SNAPSHOT_URL}" > ${STORAGE_PATH}/from_snapshot
                else
                  echo "Snapshot configuration already restored, continuing..."
                fi
              else
                echo "Snapshot restoration not enabled, skipping..."
              fi
          volumeMounts:
            - name: storage
              mountPath: /storage
          env:
            - name: RESTORE_SNAPSHOT
              value: "true"
            - name: SNAPSHOT_RESTORE_PATH
              value: {{ $values.restoreSnapshot.snapshotRestorePath | default ""  }}
            - name: SNAPSHOT_URL
              value: {{ $values.restoreSnapshot.snapshotUrl }}
          {{- with $values.env }}
          {{- range $key, $val := .}}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ $componentName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          command:
            - sh
            - -ac
            - |
              set -ex;
              exec arb-node \
                --core.checkpoint-gas-frequency=156250000 \
                --persistent.chain=/storage \
                --persistent.global-config=/storage \
                --node.rpc.addr=0.0.0.0 \
                --node.rpc.tracing.enable \
                --node.cache.allow-slow-lookup \
                --node.rpc.tracing.namespace="trace" \
                --node.rpc.enable-l1-calls \
                --metrics \
                --metrics-server.addr=0.0.0.0 \
              {{- range $arg := $values.extraArgs }}
                {{- $arg | nindent 16 }} \
              {{- end }}
                --healthcheck.enable=true
          ports:
            - name: ws
              containerPort: 8548
              protocol: TCP
            - name: http-metrics
              containerPort: 6070
              protocol: TCP
            - name: http-rpc
              containerPort: 9656
              protocol: TCP
            - name: http-jsonrpc
              containerPort: 8547
              protocol: TCP
          volumeMounts:
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
          readinessProbe:
            httpGet:
              port: 8547
              path: /
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
