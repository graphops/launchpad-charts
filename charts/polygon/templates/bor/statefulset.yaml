{{- $values := $.Values.bor }}
{{- $componentName := "bor" }}
{{- $componentLabel := include "polygon.componentLabelFor" $componentName }}
{{- if $values.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "polygon.fullname" . }}-{{ $componentName }}
  labels:
    {{- include "polygon.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "polygon.fullname" . }}-{{ $componentName }}-headless
  replicas: {{ $values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "polygon.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  volumeClaimTemplates: # TODO support using an existing PV/PVC?
    - metadata:
        name: storage
      spec:
        {{- toYaml $values.volumeClaimSpec | nindent 8 }}
  template:
    metadata:
      {{- with $values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "polygon.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "polygon.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      volumes:
        - name: tmp # this is to provide a writable /tmp even with securityContext.readOnlyRootFilesystem=true
          emptyDir: {}
        - name: genesis-config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ include "polygon.fullname" . }}-{{ $componentName }}
            # An array of keys from the ConfigMap to create as files
      initContainers:
        - name: {{ $componentName }}-init
          image: "{{ $values.initImage.repository }}:{{ $values.initImage.tag }}"
          imagePullPolicy: {{ $values.initImage.pullPolicy }}
          # securityContext:
          #   readOnlyRootFilesystem: false
          #   capabilities:
          #     drop:
          #       - ALL
          # command: ["sh", "-c", "HEIMDALL_DIR=/storage /root/heimdall/docker/entrypoint.sh start"]
          command:
            - sh
            - -c
            - |
              set -x

              sleep 5 # Small delay to give Heimdall a chance (before we fail, loop, and incur the longer delay)

              HEIMDALL_SERVICE="{{ include "polygon.fullname" . }}-heimdall"
              BOR_HOME=/storage
              DATA_DIR="$BOR_HOME/data"
              SNAPSHOT_RESTORE_PATH="$DATA_DIR/bor/chaindata"

              # If enabled and snapshot URL has been provided, bootstrap snapshot
              if [ "${BOOTSTRAP}" = 1 ] && [ "${SNAPSHOT_URL}" != "" ]; then
                if [ ! -f "$BOR_HOME/from_snapshot" ] || [ "$(cat $BOR_HOME/from_snapshot)" != "${SNAPSHOT_URL}" ]; then
                  mkdir -p "$SNAPSHOT_RESTORE_PATH"
                  wget -c "${SNAPSHOT_URL}" -O - | tar -xz -C "$SNAPSHOT_RESTORE_PATH"
                  echo "${SNAPSHOT_URL}" > ${BOR_HOME}/from_snapshot
                fi
              fi

              READY=$(curl -s http://$HEIMDALL_SERVICE:26657/status | jq '.result.sync_info.catching_up')
              while [ "${READY}" != "false" ];
              do
                  echo "Waiting for heimdall to catch up."
                  sleep 30
                  READY=$(curl -s $HEIMDALL_SERVICE:26657/status | jq '.result.sync_info.catching_up')
              done

          volumeMounts:
            - name: storage
              mountPath: /storage
          env:
          {{- if $values.fromSnapshot.enabled }}
            - name: BOOTSTRAP
              value: "1"
            - name: SNAPSHOT_URL
              value: {{ $values.fromSnapshot.snapshotUrl }}
          {{- end }}
          {{- with $values.env }}
          {{- range $key, $val := .}}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
      containers:
        - name: {{ $componentName }}
          image: "{{ $values.image.repository }}:{{ $values.image.tag }}"
          imagePullPolicy: {{ $values.image.pullPolicy }}
          # securityContext:
          #   readOnlyRootFilesystem: true
          #   capabilities:
          #     drop:
          #       - ALL
          command:
            - sh
            - -c
            - |
              set -x

              BOR_HOME=/storage
              DATA_DIR=$BOR_HOME/data

              bor --datadir $DATA_DIR init /genesis-config/genesis.json

              exec bor --datadir=$DATA_DIR \
                {{- range $arg := $values.extraArgs }}
                  {{- $arg  | nindent 16 }} \
                {{- end }}
                --bor.heimdall=http://{{ include "polygon.fullname" . }}-heimdall:{{ get $.Values.heimdall.service.ports "http-rest" }}
          ports:
            - name: http-metrics
              containerPort: 6060
              protocol: TCP
            - name: http-jsonrpc
              containerPort: 8545
              protocol: TCP
            - name: udp-p2p
              containerPort: 30303
              protocol: UDP
            - name: tcp-p2p
              containerPort: 30303
              protocol: TCP
          volumeMounts:
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
            - name: genesis-config
              mountPath: /genesis-config
          {{- with $values.env }}
          env:
          {{- range $key, $val := .}}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- end }}
          # readinessProbe:
          #   # This currently requires GRPCContainerProbe feature gate to be enabled on the kubelet
          #   # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-grpc-liveness-probe
          #   # https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
          #   grpc:
          #     port: 9090 # named ports not supported yet by grpc probes
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance # TODO what about cross-release antiAffinity
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
