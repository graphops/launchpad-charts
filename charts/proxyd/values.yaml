# Default values for proxyd.
# This is a YAML-formatted file.

nameOverride: ""
fullnameOverride: ""

image:
  # -- Image for proxyd
  repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/proxyd
  pullPolicy: IfNotPresent
  # -- Overrides the image tag
  # @default -- Chart.appVersion
  tag: ""

# -- Pull secrets required to fetch the Image
imagePullSecrets: []

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

prometheus:
  serviceMonitors:
    # -- Enable monitoring by creating `ServiceMonitor` CRDs ([prometheus-operator](https://github.com/prometheus-operator/prometheus-operator))
    enabled: false
    labels: {}
    interval:
    scrapeTimeout:
    relabelings: []

grafana:
  # -- Enable creation of Grafana dashboards. [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart) must be configured to search this namespace, see `sidecar.dashboards.searchNamespace`
  dashboards: false
  # -- Must match `sidecar.dashboards.label` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabel: grafana_dashboard
  # -- Must match `sidecar.dashboards.labelValue` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabelValue: "1"

proxyd:
  # -- Additional CLI arguments to pass to `proxyd`
  extraArgs: []

  # -- Number of replicas
  replicaCount: 1

  # Increasing the grace termination period prevents Kubernetes
  # from killing the node process prematurely. Premature shutdown
  # can lead to data integrity issues
  # -- Amount of time to wait before force-killing the proxyd process
  terminationGracePeriodSeconds: 60

  # -- Annotations for the `Pod`
  podAnnotations: {}

  # -- Pod-wide security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 101337
    runAsGroup: 101337
    fsGroup: 101337

  service:
    type: ClusterIP
    ports:
      # Valid keys are names of ports that are exposed by the Pod that (see templates/stateful-node/statefulset.yaml)
      # -- Service Port to expose JSON-RPC interface on
      http-jsonrpc: 8545
      http-ws: 8546
      # -- Service Port to expose Prometheus metrics on
      http-metrics: 9761

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi

  nodeSelector: {}

  tolerations: []

  affinityPresets:
    # -- Configure anti-affinity rules to prevent multiple instances on the same host
    antiAffinityByHostname: true

  affinity: {}

  configTemplating:
    # -- Enables config templating from the values. If set to false, must provide an existing ConfigMap
    enabled: true

  # -- Name of an existing ConfigMap with proxyd configuration. proxyd.configTemplating.enable must be set to false
  existingConfigMap: ""


backends:
  # -- Example backend configuration, keep disabled
  example-backend:
    # -- Enable the backend
    enabled: false
    # -- Define the JSON-RPC URL for the backend
    rpcUrl: http://your-node:8545
    # -- Define the JSON-RPC Websocket URL for the backend
    wsUrl: ws://your-node:8545
    # -- Define additional configuration keys for the backend (see [proxyd config](https://github.com/ethereum-optimism/optimism/blob/5d309e6a6d5e1ef6a88c1ce827b7e6d47f033bbb/proxyd/example.config.toml#L47))
    extraConfig: {}
    # -- Define which backend groups the backend is part of
    groups:
      - main

# -- Mapping JSON-RPC method name to a particular group of backends (method_name -> group_name)
rpcMethodMappings:
  web3_clientVersion: main
  web3_sha3: main
  net_version: main
  net_peerCount: main
  eth_syncing: main
  eth_chainId: main
  eth_protocolVersion: main
  eth_coinbase: main
  eth_feeHistory: main
  eth_gasPrice: main
  eth_blockNumber: main
  eth_getBalance: main
  eth_getStorageAt: main
  eth_getTransactionCount: main
  eth_getBlockTransactionCountByHash: main
  eth_getBlockTransactionCountByNumber: main
  eth_getCode: main
  eth_sign: main
  eth_sendTransaction: main
  eth_sendRawTransaction: main
  eth_estimateGas: main
  eth_getBlockByHash: main
  eth_getBlockByNumber: main
  eth_getTransactionByHash: main
  eth_getTransactionByBlockHashAndIndex: main
  eth_getTransactionByBlockNumberAndIndex: main
  eth_getTransactionReceipt: main
  eth_getUncleByBlockHashAndIndex: main
  eth_getUncleByBlockNumberAndIndex: main
  eth_newFilter: main
  eth_newBlockFilter: main
  eth_newPendingTransactionFilter: main
  eth_uninstallFilter: main
  eth_getFilterChanges: main
  eth_getLogs: main
  eth_call: main
  trace_block: main
  trace_filter: main
  trace_transaction: main
  trace_call: main
  trace_callMany: main
  trace_rawTransaction: main
  trace_replayBlockTransactions: main
  trace_replayTransaction: main

# -- Backend group to use for WebSocket connections
wsBackendGroup: main

# -- Method whitelist for WebSocket connections
wsMethodWhitelist: []

# -- Enable configuring Redis
redisEnabled: false
# -- URL to a Redis instance
redisUrl: ""
# -- Redis namespace to use for keys
redisNamespace: ""

# -- Enable caching
cacheEnabled: false

# -- TOML configuration for server
serverConfigTemplate: |
  # Host for the proxyd RPC server to listen on
  rpc_host = "0.0.0.0"
  # Port for the above.
  rpc_port = 8545
  # Host for the proxyd WebSocket server to listen on
  ws_host = "0.0.0.0"
  # Port for the above.
  ws_port = 8546
  # Maximum client body size, in bytes, that the server will accept
  max_body_size_bytes = 10737420000 # 10 GiB
  # Maximum number of concurrent RPCs that the server will accept
  max_concurrent_rpcs = 0 # unlimited
  # Timeout for requests
  timeout_seconds = 300

# -- TOML configuration for backend
backendConfigTemplate: |
  # How long proxyd should wait for a backend response before timing out.
  response_timeout_seconds = 300
  # Maximum response size, in bytes, that proxyd will accept from a backend.
  max_response_size_bytes = 10737420000 # 10 GiB
  # Maximum number of times proxyd will try a backend before giving up.
  max_retries = 3
  # Number of seconds to wait before trying an unhealthy backend again.
  out_of_service_seconds = 10

# -- TOML configuration for metrics
metricsConfigTemplate: |
  # Whether or not to enable Prometheus metrics.
  enabled = true
  # Host for the Prometheus metrics endpoint to listen on.
  host = "0.0.0.0"
  # Port for the above.
  port = 9761

# -- TOML configuration for backend group websockets
wsConfigTemplate: |
  # Backend group to use for WebSocket connections.
  ws_backend_group = {{ .Values.wsBackendGroup | quote }}
  # Method whitelist for WebSocket connections.
  ws_method_whitelist = {{ .Values.wsMethodWhitelist | toJson }}

# -- TOML configuration for cache
cacheConfigTemplate: |
  # Whether or not to enable caching.
  enabled = {{ .Values.cacheEnabled }}

# -- TOML configuration for redis
redisConfigTemplate: |
  # URL to a Redis instance.
  url = {{ .Values.redisUrl | quote }}
  # Redis namespace to use for keys.
  namespace = {{ .Values.redisNamespace | quote }}
  
# -- The configuration template that is rendered by Helm
# @default -- See default template in [values.yaml](values.yaml)
configTemplate: |
  {{ tpl .Values.wsConfigTemplate $ }}
  [server]
  {{ tpl .Values.serverConfigTemplate $ }}

  [metrics]
  {{ tpl .Values.metricsConfigTemplate $ }}

  [backend]
  {{ tpl .Values.backendConfigTemplate $ }}

  [cache]
  {{ tpl .Values.cacheConfigTemplate $ }}

  [backends]
  {{- range $backendName, $backendValues := .Values.backends }}
  {{- if $backendValues.enabled }}
  [backends.{{ $backendName }}]
  rpc_url = {{ default "" $backendValues.rpcUrl | quote }}
  ws_url = {{ default "ws://dummy-host-ws-disabled" $backendValues.wsUrl | quote }}
  max_rps = {{ default 0 $backendValues.maxRps }}
  {{- with $backendValues.extraConfig }}
  {{ toToml . }}
  {{- end }}
  {{- end }}
  {{- end }}

  [backend_groups]
  {{- range $groupName, $groupMembers := .computed.backendGroups }}
  [backend_groups.{{ $groupName }}]
  consensus_aware = true
  {{ toToml (dict "backends" $groupMembers) }}
  {{- end }}
  
  [rpc_method_mappings]
  {{- range $method, $group := .Values.rpcMethodMappings }}
  {{ $method }} = {{ $group | quote }}
  {{- end }}

  {{- if .Values.redisEnabled }}
  [redis]
  {{ tpl .Values.redisConfigTemplate $ }}
  {{- end }}
