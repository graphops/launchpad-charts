# Default values for arbitrum.
# This is a YAML-formatted file.

nameOverride: ""
fullnameOverride: ""

image:
  # -- Image for arbitrum
  repository: offchainlabs/nitro-node
  pullPolicy: IfNotPresent
  # -- Overrides the image tag
  # @default -- Chart.appVersion
  tag: ""

# -- Pull secrets required to fetch the Image
imagePullSecrets: []

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  # -- Specifies whether RBAC resources are to be created
  create: true
  # -- Required ClusterRole rules
  # @default -- See `values.yaml`
  clusterRules:
     # Required to obtain the nodes external IP
    - apiGroups: [""]
      resources:
      - "nodes"
      verbs:
      - "get"
      - "list"
      - "watch"
  # -- Required ClusterRole rules
  # @default -- See `values.yaml`
  rules:
    # Required to get information about the serices nodePort.
    - apiGroups: [""]
      resources:
      - "services"
      verbs:
      - "get"
      - "list"
      - "watch"

prometheus:
  serviceMonitors:
    # -- Enable monitoring by creating `ServiceMonitor` CRDs ([prometheus-operator](https://github.com/prometheus-operator/prometheus-operator))
    enabled: false
    labels: {}
    interval:
    scrapeTimeout:
    relabelings: []
    metricRelabelings: []

grafana:
  # -- Enable creation of Grafana dashboards. [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart) must be configured to search this namespace, see `sidecar.dashboards.searchNamespace`
  dashboards: false
  # -- Must match `sidecar.dashboards.label` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabel: grafana_dashboard
  # -- Must match `sidecar.dashboards.labelValue` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabelValue: "1"

nitro:
  # -- Nitro configuration parameters
  config:
    # -- Chain ID, 42161 for Arbitrum One
    chain: 42161
    # -- RPC URL to L1 chain (ethereum)
    parentChainUrl: "CHANGE_ME_RPC_URL"
    # -- Beacon URL to L1 chain (ethereum)
    parentChainBeaconUrl: "CHANGE_ME_BEACON_URL"
    # -- RPC Url to Arbitrum Classic Archive node if serving classic blocks
    classicUrl: null
    # -- RPC config parameters
    httpRpc:
      # -- Enabled APIs
      api: net,web3,eth,debug
      # -- Listen address
      addr: 0.0.0.0
      # -- Allowed vhosts
      vhosts: "*"
      # -- Allowed CORS domains
      cors: "*"
    # -- Metrics parameters
    metrics:
      # -- Enable metrics
      enabled: true
      # -- Listen address
      addr: 0.0.0.0

    # -- Enabled default arguments on the chart
    defaultArgs:
      - "--execution.caching.archive"

    # -- Additional CLI arguments to pass to `nitro`
    extraArgs: []

  # -- Extra labels to attach to the Pod for matching against
  extraLabels: {}

  # -- [PersistentVolumeClaimSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#persistentvolumeclaimspec-v1-core) for arbitrum storage
  volumeClaimSpec:
    accessModes: ["ReadWriteOnce"]
    # -- The storage class to use when provisioning a persistent volume for arbitrum
    storageClassName: 
    resources:
      requests:
        # -- The amount of disk space to provision for arbitrum
        storage: 8Ti

  restoreSnapshot:
    # -- Enable initialising arbitrum state from a remote snapshot
    enabled: false
    # -- URL for snapshot to download and extract to restore state
    snapshotUrl: "https://snapshot.arbitrum.foundation/arb1/nitro-archive.tar"
    # -- Path where the snapshot should be unpacked to, relative to the volume root
    subpath: "data/nitro"
    # -- Erase destination path before unpacking
    cleanSubpath: true
    # -- Size of chunks for chunked downloading. Too small hurts performance, too big leads to more waste when it needs to be retried
    chunkSize: 1000000000
    # -- A string with extra arguments to tar command (i.e. "--strip-components=1")
    extraTarArgs: null

  # Increasing the grace termination period prevents Kubernetes
  # from killing the node process prematurely. Premature shutdown
  # can lead to data integrity issues
  # -- Amount of time to wait before force-killing the arbitrum process
  terminationGracePeriodSeconds: 60

  # -- Annotations for the `Pod`
  podAnnotations: {}

  # -- Pod-wide security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 101337
    runAsGroup: 101337
    fsGroup: 101337

  service:
    topologyAwareRouting:
      enabled: false
    type: ClusterIP
    ports:
      # Valid keys are names of ports that are exposed by the Pod that (see templates/nitro/statefulset.yaml)
      # -- Service Port to expose JSON-RPC interface on
      http-rpc: 8547
      # -- Service Port to expose WebSockets interface on
      ws-rpc: 8548
      # -- Service Port to expose Prometheus metrics on
      http-metrics: 6070

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi

  nodeSelector: {}

  tolerations: []

  affinityPresets:
    # -- Configure anti-affinity rules to prevent multiple arbitrum instances on the same host
    antiAffinityByHostname: true

  affinity: {}
